#!/bin/bash

# This directory should ALWAYS exist, but check anyway.
if [ ! -d ${CALIBTABLESROOT} ]; then
    echo captain-build-database: Installation directory is missing!
    echo    where is: ${CALIBTABLESROOT}
    exit 1
fi
cd ${CALIBTABLESROOT}

# This directory won't exist when the package is checkout the first
# time, but should have been created by captain-get-calibrations.
if [ ! -d ./${CALIBTABLESCONFIG} ]; then
    echo captain-build-database: Config directory is missing!
    echo    where is: ${CALIBTABLESCONFIG}
    exit 1
fi
cd ${CALIBTABLESCONFIG}

# This directory won't exist when the package is checkout the first
# time, but should have been created by captain-get-calibrations.
if [ ! -d ./tables ]; then
    echo captain-build-database: Table directory is missing!
    echo    where is: ./tables
    exit 1
fi

if [ ${#ENV_TSQL_URL} == 0 ]; then
    echo captain-build-database: The database variable is not set!
    echo    Set ENV_TSQL_URL
    exit 1
fi

# The location of the table definition files.
DEFINITIONS=${CALIBTABLESROOT}/definitions

# The location of the downloaded calibration table data.
UPDATES=${CALIBTABLESROOT}/${CALIBTABLESCONFIG}/tables

# The location of the static calibration table data.
STATIC_UPDATES=${CALIBTABLESROOT}/static

# Check if the calibrations database already exists.
FILENAME=$(echo ${ENV_TSQL_URL} | sed s_sqlite://__)
if [ -f ${FILENAME} ]; then
    APPLY="NO"
    if [ -n "$(find ${DEFINITIONS} -name "*.def" -newer ${FILENAME})" ]; then
	echo Need to update database because of definitions
	APPLY="YES"
    fi
    if [ -n "$(find ${UPDATES} -name "*.update*" -newer ${FILENAME})" ]; then
	echo Need to update database because of updates.
	APPLY="YES"
    fi
    if [ -n "$(find ${STATIC_UPDATES} -name "*.update*" -newer ${FILENAME})" ]; then
	echo Need to update database because of updates.
	APPLY="YES"
    fi
    if [ ${APPLY} = "NO" ]; then
	echo "Database is up to date"
	exit 0
    fi
    echo "Remove existing database"
    rm ${FILENAME}
fi

for def in ${DEFINITIONS}/*.def; do
    echo '###########################################################'
    echo Apply: ${update}
    echo '###########################################################'
    database_updater.py apply_local_update ${def}
done

for update in ${UPDATES}/*.update ${UPDATES}/*.update.gz; do
    echo '###########################################################'
    echo Update: ${update}
    echo '###########################################################'
    if [ -f ${update} ]; then
	database_updater.py apply_local_update ${update}
    fi
done

for update in ${STATIC_UPDATES}/*.update; do
    echo '###########################################################'
    echo Update: ${update}
    echo '###########################################################'
    if [ -f ${update} ]; then
	database_updater.py apply_local_update ${update}
    fi
done

